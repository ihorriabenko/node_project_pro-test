{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Pro-test API docs",
    "description": "API documentation for GoIT project 'Pro-test'. [Backend github repository](https://github.com/iryabenkoff/node_project_pro-test)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [{ "url": "https://node-project-pro-test.herokuapp.com/" }],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Question",
      "description": "Question endpoints"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["User"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["User"],
        "summary": "Log out",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/questions/{type}": {
      "get": {
        "tags": ["Question"],
        "summary": "Get 12 random questions",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "tech || theory",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getQuestionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["username", "password", "email"],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "User",
            "maxLength": 10
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 6,
            "maxLength": 30
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwer1234",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 6,
            "maxLength": 30
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwer1234",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string",
            "description": "Session's access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "user": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "User"
              }
            }
          }
        }
      },
      "getQuestionsResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "634e71e6b739faa5926ec292"
          },
          "question": {
            "type": "string",
            "example": "What is dynamic testing?"
          },
          "answers": {
            "type": "array",
            "example": [
              "This is testing by only executing code with different input values and confirming the results",
              "This is testing by executing only the program with different input values and confirming the results",
              "This is testing by executing a code or program with different input values and confirming the results",
              "This is testing by executing code",
              "This is testing with different inputs and validation of the results.",
              "I don't know"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
